@model IEnumerable<IPTV2_Model.Product>
@{
    ViewBag.Title = String.Format("TFC.tv cPanel - {0}", "Settlement");

    var list = Model.ToList().Select(item => new SelectListItem() { Text = item.Name, Value = item.ProductId.ToString() });

    var currencies = (System.Data.Entity.DbSet<IPTV2_Model.Currency>)ViewBag.Currencies;

    var currency_list = currencies.ToList().Select(item => new SelectListItem() { Text = item.Code, Value = item.Code });
}
<h2>
    Settlement</h2>
<form id="form1" method="post" action="/Settlement/_Subscription">
<table>
    <tr>
        <th>
            Email Address
        </th>
        <td>@Html.TextBox("EmailAddress")
        </td>
        <td>
            <a href="#" id="CheckEmailAddress">Check Email</a>
        </td>
        <td>
            <span id="isvalid" class="hidden">@Html.ImageBuilder(Url, "check.png", new { id = "resimg", width = 25, height = 25 })</span>
        </td>
    </tr>
    <tr>
        <th>
            Product
        </th>
        <td colspan="3">@Html.DropDownList("Product", list)
        </td>
    </tr>
    <tr>
        <th>
            Mode of Payment
        </th>
        <td colspan="3">@*@Html.DropDownList("PaymentMethod", Enumerable.Empty<SelectListItem>(), "Loading values...")*@
            @Html.DropDownList("PaymentMode", new SelectList(new[] { new KeyValuePair<string, int>("Prepaid Card", 1), new KeyValuePair<string, int>("E-Wallet", 2), new KeyValuePair<string, int>("Credit Card", 3), new KeyValuePair<string, int>("Paypal", 4), new KeyValuePair<string, int>("Migration", 5) }, "Value", "Key"), "Select One...")
        </td>
    </tr>
    <tr>
        <th>
            Amount
        </th>
        <td colspan="3">@Html.TextBox("Amount")
        </td>
    </tr>
    <tr>
        <th>
            Currency
        </th>
        <td colspan="3">@Html.DropDownList("Currency", currency_list)
        </td>
    </tr>
    <tr>
        <th>
            Reference
        </th>
        <td colspan="3">@Html.TextBox("Reference")
        </td>
    </tr>
    <tr>
        <th>
            End Date
        </th>
        <td colspan="3">@Html.TextBox("EndDate")
        </td>
    </tr>
    <tr>
        <th>
            Override product's duration
        </th>
        <td colspan="3">@Html.CheckBox("OverrideDuration")
        </td>
    </tr>
    <tr>
        <th>
            Is this a refund?
        </th>
        <td colspan="3">@Html.CheckBox("IsRefund")
        </td>
    </tr>
    <tr>
        <th>
            Include wallet load<br />
            in refund?
        </th>
        <td colspan="3">@Html.CheckBox("IncludeWalletLoad")
        </td>
    </tr>
    <tr>
        <th>
        </th>
        <td colspan="3">
            <input type="submit" value="Submit" id="cmdSubmit" />
        </td>
    </tr>
    <tr>
        <td colspan="4" style="text-align: center;">
            <span id="result" class="hidden red">You have successfully settled a complaint.</span>
        </td>
    </tr>
</table>
</form>
@section Stylesheet {
}
@section JscriptBottom{
    <script type="text/javascript">
        $('#CheckEmailAddress').click(function () {
            $('#isvalid').hide();
            var email = $('#EmailAddress').val();
            console.log(email);
            $.get("/Ajax/CheckEmail", { email: email },
            function (data) {
                if (data > 0) {
                    $('#resimg').attr('src', '/Content/images/smileys/grin--plz.png');

                }
                else
                    $('#resimg').attr('src', '/Content/images/smileys/killyouwithfireplz.gif');
                $('#isvalid').show();
            });
            return false;
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#EndDate').datetimepicker({
                showSecond: true,
                timeFormat: 'hh:mm:ss'
            });
            var validator = $('form#form1').validate({
                rules: {
                    EmailAddress: {
                        required: true,
                        email: true
                    },
                    PaymentMode: { required: true },
                    Amount: { required: true, number: true },
                    Reference: { required: true }
                },
                messages: {
                    EmailAddress: { required: 'Email address is required.', email: 'Email is not of valid format.' },
                    PaymentMode: { required: 'Payment mode is required.' },
                    Amount: { required: 'Amount is required.', number: 'Amount should be numeric.' },
                    Reference: { required: 'Reference is required.' }
                },
                errorPlacement: function (error, element) {
                    $.pnotify({
                        text: error.text(),
                        type: 'error',
                        styling: 'jqueryui',
                        icon: false
                    }).delay(1500);
                }
            });

            $('#form1').submit(function (event) {
                event.preventDefault();

                var form = $(this);
                var cmdSubmit = $('#cmdSubmit');
                var result = $('#result');
                if (validator.numberOfInvalids() == 0) {
                    disableButton(cmdSubmit);
                    hideElement(result, true);

                    $.post($(this).attr('action'), form.find('input, select').serialize(), function (data) {
                        result.html(data.StatusMessage);
                        enableButton(cmdSubmit);
                        result.show();
                        if (data.StatusCode > 0)
                            $('input').empty();
                    });
                }
            });

        });
    </script>
}
