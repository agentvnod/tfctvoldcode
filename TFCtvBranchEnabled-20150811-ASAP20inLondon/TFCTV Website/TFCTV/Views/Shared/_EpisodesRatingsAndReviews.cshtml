@model IPTV2_Model.Episode
@{
    IPTV2_Model.Show show = (IPTV2_Model.Show)ViewBag.Show;
    TFCTV.Helpers.UserData userData = TFCTV.Helpers.MyUtility.GetUserPrivacySetting(null);
    if (User.Identity.IsAuthenticated)
    {
        var userId = new Guid(User.Identity.Name);
        userData = TFCTV.Helpers.MyUtility.GetUserPrivacySetting(userId);
    }
    int attribActionId = (int)AnniversaryPromo.AnnivPromo_PostingREVIEW;
    //string attribDescription = String.Format("You commented on <a href=\"{0}\">{1} {2}</a>", Request.Url.AbsoluteUri, show.Description, Model.Description);
    string attribDescription = String.Format("You commented on <a href=\"{0}\">{1}</a>", Request.Url.AbsoluteUri, String.Compare(Model.EpisodeCode, Model.EpisodeName, true) == 0 ? String.Format("{0} - {1}", show.Description, Model.DateAired.Value.ToString("MMMM d, yyyy")) : Model.EpisodeName);
    var streamID = String.Format("Episode_{0}", Model.EpisodeId);
    var noCommentText = String.Format("There are no comments available for {0}", String.Compare(Model.EpisodeCode, Model.EpisodeName, true) == 0 ? String.Format("{0} - {1}", show.Description, Model.DateAired.Value.ToString("MMMM d, yyyy")) : Model.EpisodeName);

    bool IsAjaxCrawlable = false;
    if (ViewBag.IsAjaxCrawlable != null)
    {
        IsAjaxCrawlable = (bool)ViewBag.IsAjaxCrawlable;
    }    
}
<!-- comment -->
<div class="reviews-comments-Header">
    <h2 class="h2-comments-header">
        Ratings And Reviews</h2>
</div>
@{using (Html.BeginForm(String.Empty, String.Empty, FormMethod.Post, new { id = "naform1", style = "display: none;" }))
  {                  
    <div class="clear">@Html.AntiForgeryToken()</div>
    @Html.TextBox("naId", attribActionId, new { id = "naId", type = "hidden" })
    @Html.TextBox("naDescription", HttpUtility.HtmlEncode(attribDescription), new { id = "naDescription", type = "hidden" })
  }
}
<br />
<div class="transparentBgs">
    <div id="episode-ratings-reviews">
        <div id="commentsDiv">
            @{if (IsAjaxCrawlable)
              {
                  try
                  {
                      var responseData = GigyaMethods.GetComments("Episodes", streamID);
                      if (responseData != null)
                      {
                          if (responseData.errorCode == 0)
                          {
                              if (responseData.commentCount > 0)
                              {
                @Html.Raw(responseData.comments)
                              }
                              else
                              { 
                <span>@noCommentText</span>
                              }
                          }
                      }
                  }
                  catch (Exception) { }
              }
            }
        </div>
    </div>
</div>
<br />
<div class="apple_overlay" id="signinoverlay">
    <div class="contentWrap">
    </div>
</div>
<!--   end -->
<script type='text/javascript'>            
    var ratingsParams = {
        categoryID: 'Episodes',
        streamID: '@streamID',
        containerID: 'ratingDiv',
        linkedCommentsUI: 'commentsDiv',
        ratingTemplate: 'Average rating: $stars $addReviewButton'
    }                
                
                                                
    $(".gig-rating-readReviewsLink,.gig-rating-writeYourReview").live("click", function () {
        $('html,body').animate({ scrollTop: $("#commentsDiv").offset().top }, 'slow');
        return false;
    });

    function publishInternalUserAction(params) {
        var actInternal = new gigya.services.socialize.UserAction();
        actInternal.setLinkBack(location.href);
        actInternal.setTitle('@Ajax.JavaScriptStringEncode(show.Description) - @Model.DateAired.Value.ToString("MMM d, yyyy")');                    
        actInternal.setDescription('has posted a comment : "' + params.comment + '"');                    
        actInternal.addMediaItem({ type: 'image', src: '@GlobalConfig.EpisodeImgPath@Model.EpisodeId/@Model.ImageAssets.ImageVideo', href: location.href });                    
        actInternal.actorUID = '@User.Identity.Name';                    
        var params = {
            feedID: 'UserAction',
            userAction: actInternal,
            scope: 'internal',
            privacy: 'public',
            callback: publishInternalUserAction_callback
        };
        @{
            if (userData != null)
            {
                if (userData.IsInternalSharingEnabled.Contains("true"))
                {
                <text>
                gigya.services.socialize.publishUserAction(params);
                </text>
                }
            }
        }                    
    }

    function publishInternalUserAction_callback(response) {
        if (response.errorCode != 0) {
            //catch error
        }
    }                           
</script>
@{if (!IsAjaxCrawlable)
  { 
    <script type="text/javascript">
        var act = new gigya.services.socialize.UserAction();
        act.setLinkBack(location.href);
        act.setTitle("Pinoy TV Shows on TFC.tv");
        act.setSubtitle("tfc.tv");
        act.addActionLink("Read More", location.href);
        act.addMediaItem({ type: 'image', src: '@GlobalConfig.EpisodeImgPath@Model.EpisodeId/@Model.ImageAssets.ImageVideo', href: location.href });
        act.setUserMessage('has posted a comment about @Ajax.JavaScriptStringEncode(show.Description) - @Model.DateAired.Value.ToString("MMMM d, yyyy")');

        var params = {
            enabledProviders: '@GlobalConfig.SocialProvidersList',
            categoryID: 'Episodes',
            streamID: '@streamID',
            containerID: 'commentsDiv',
            userAction: act,
            cid: '@Model.EpisodeName',
            width: 860,
            useSiteLogin: true,
            onLoad: onLoadHandler,
            shortURLs: 'never',
            onSiteLoginClicked: onSiteLoginHandler,
            onCommentSubmitted: onCommentSubmittedHandler,
            version: 2
        }
        gigya.comments.showCommentsUI(params);

        function onLoadHandler(event) {
            tfc.Social.OnRatingsAndReviews({ rated: '@ViewBag.Rated' });
            changeRatingsAttribute();
        }

        function onSiteLoginHandler(event) {
            tfc.Social.OnSiteLogin();
        }

        function onLogoutHandler(eventObj) {
            window.location = '/User/LogOut?returl=' + location.href;
        }

        function onCommentSubmittedHandler(eventObj) {
            var userId = '@User.Identity.Name';
            var reactionTypeId = tfc.Social.getEngagementId('rate');
            var episodeId = '@Model.EpisodeId';
            var name = '@Model.EpisodeName';
            $.post('/SocialEngagement/EpisodeReactions',
                {
                    userId: userId,
                    reactionTypeId: reactionTypeId,
                    episodeId: episodeId,
                    action: 'add'
                }, function (data) {
                });
            var nform = $('form#naform1');

            $.post("/Ajax/NotifyAction", nform.find('input').serialize(), function (data) {
            });
            if ("providerPostIDs" in eventObj) {
                reactionTypeId = tfc.Social.getEngagementId('share');
                $.post('/SocialEngagement/EpisodeReactions',
                    {
                        userId: userId,
                        reactionTypeId: reactionTypeId,
                        episodeId: episodeId,
                        action: 'add'
                    }, function (data) {
                        //alert(data);
                    });
            }

            gigya.services.socialize.showRatingUI(ratingsParams);

            var params = { comment: eventObj.commentText };
            publishInternalUserAction(params);
            tfc.Social.OnRatingsAndReviews({ rated: 'True' });
        }
    </script>
  }
}
