@using TFCTV.Helpers
@model List<SubscriptionProductA>
@{
    ViewBag.Title = "Subscribe - TFC.tv";
    Layout = "~/Views/Shared/_TFCTVBlue.cshtml";
    var csId = Url.RequestContext.RouteData.Values["id"];
    if (Url.RequestContext.RouteData.Values["id"] == null)
    {
        csId = "null";
    }
    var ReturnUrl = HttpUtility.UrlEncode(ViewContext.HttpContext.Request["ReturnUrl"]);
    string ReturnUrlStr = String.Empty;
    if (!String.IsNullOrEmpty(ReturnUrl))
    {
        ReturnUrlStr = String.Format("?ReturnUrl={0}", ReturnUrl);
    }
    var isLoggedIn = MyUtility.isUserLoggedIn().ToString().ToLower();
}
<br />
<br />
<div id="mainBody">
    <div class="transparentBg">
        <div id="transact-container">
            <div class="breadcrumbs">
                HOME &raquo; SUBSCRIBE
            </div>
            <div class="breakStandard">
            </div>
            <div id="subscribe-body">
                <ul id="b-options">
                    @{
                        int ctr = 0;
                        foreach (var item in Model.Select(p => p.productGroup).Distinct())
                        {
                            bool isShow = false;
                            SubscriptionProductA modelItem = null;
                            modelItem = Model.Where(p => p.productGroup == item).FirstOrDefault(p => p.product.ProductId == item.DefaultProductId);
                            if (modelItem == null)
                            {
                                modelItem = Model.Where(p => p.productGroup == item).OrderBy(p => p.productPrice.Amount).First();
                            }
                            var lowestProductPrice = modelItem.productPrice;
                            var subscP = (IPTV2_Model.SubscriptionProduct)modelItem.product;
                            var itemName = @item.Name.Replace("TFC.tv ", "").ToUpper();
                            if (System.Text.RegularExpressions.Regex.IsMatch(itemName, "^PAY PER.+", System.Text.RegularExpressions.RegexOptions.IgnoreCase))
                            {
                                itemName = "ALA CARTE";
                                isShow = true;
                            }
                            //Content count
                            var mItem = @Model.FirstOrDefault(p => p.productGroup == item);
                            var contentCount = mItem.contentCount;
                            var contentDesc = mItem.contentDescription;

                            string contentDescription = String.Format("{0} {1}", contentDesc, (isShow ? "Show" : "Title"));
                            if (!String.IsNullOrEmpty(ViewBag.ShowName))
                            {
                                contentDescription = String.Format("{0} & {1} Titles", ViewBag.ShowName, contentDesc);
                                if (isShow)
                                {
                                    contentDescription = ViewBag.ShowName;
                                }
                            }
                            
                        <li @Html.Raw(ctr == 0 ? "class=\"selected phighlighted\"" : "class=\"pnormal\"") data-group="@String.Format("#pgi{0}", item.ProductGroupId)" data-package="@string.Join(",", item.GetPackageIds())" data-show="@string.Join(",", item.GetShowIds())" data-type="@Convert.ToInt32(isShow)">
                            <div @Html.Raw(ctr == 0 ? "class=\"bo-title pbtext\"" : "class=\"bo-title\"")>@itemName
                            </div>
                            <div @Html.Raw(ctr == 0 ? "class=\"bo-desc pbdesc\"" : "class=\"bo-desc\"")>
                                <span class="bo-price">
                                    @String.Format("{1} {0} / {2}", lowestProductPrice.Amount.ToString("F"), lowestProductPrice.CurrencyCode, MyUtility.FormatDuration(subscP.DurationType, subscP.Duration, true))</span><br />
                                @Html.Raw(contentDescription)
                            </div>
                            <div id="@String.Format("pgi{0}", item.ProductGroupId)" class="hideElement @Html.Raw(@ctr == 0 ? "fview" : "")">
                                @*@foreach (var p in Model.Where(m => m.productGroup == item).OrderBy(m => m.productPrice.Amount))
                                {
                                    <text>
                                    <div id="@String.Format("pg-body-{0}", item.ProductGroupId)" class="floatLeft" class="rb-box">
                                        <div class="rb-container">
                                            <input @Html.Raw(item.DefaultProductId == p.product.ProductId || item.DefaultProductId == null ? "checked" : "") type="radio" name="product-selections" value="@p.product.ProductId" /></div>
                                        <div class="rb-desc">@p.productPrice.CurrencyCode @p.productPrice.Amount.ToString("F")
                                            for
                                            <br />@MyUtility.FormatDuration(p.product.DurationType, p.product.Duration)</div>
                                    </div>
                                    </text>
                                }*@
                                <div class="floatLeft">
                                    <select id="@String.Format("product-selections-{0}", item.ProductGroupId)" name="product-selections" class="textbox-extra-large">
                                        @foreach (var p in Model.Where(m => m.productGroup == item).OrderBy(m => m.productPrice.Amount))
                                        {
                                            <text>
                                            <option value="@p.product.ProductId" @Html.Raw(item.DefaultProductId == p.product.ProductId || item.DefaultProductId == null ? "selected" : "")>@p.productPrice.CurrencyCode
                                                @p.productPrice.Amount.ToString("F") for @MyUtility.FormatDuration(p.product.DurationType, p.product.Duration)</option>
                                            </text>
                                        }
                                    </select></div>
                            </div>
                        </li>                                                       
                                        ctr++;
                        }
                    }
                </ul>
            </div>
            <div class="clear">
            </div>
            <div id="pr-container">
                <div class="breakStandard">
                </div>
                <div id="pr-options" class="fold-top">
                    <div class="breakStandard">
                    </div>
                    <div class="pr-options-body">
                    </div>
                    <div id="sub-btn-body">
                        <a id="subscribeBtn" href="/" class="nbutton nbutton-anchor pad20 s20">Subscribe</a>
                    </div>
                </div>
                <div class="clear breakLarge">
                </div>
            </div>
            <div class="clear">
            </div>
            <div id="slist-container">
                <div id="slist-header">
                    <div class="slist-selection">
                        <span class="list-s"><a href="#" class="grid-link scont-selection" data-link="slist-list">
                            Grid</a><a href="#" class="list-link scont-selection" data-link="slist-tlist">List</a></span></div>
                    <div id="ddselection">
                        <span class="list-s"><span class="white">Filter by</span>&nbsp;&nbsp; @Html.DropDownList("FilterBy", new SelectList(new List<JsonFeatureItem>()), new { @class = "textbox-medium" })</span></div>
                </div>
                <div class="breakSmall">
                </div>
                <div id="slist-list" class="scont">
                </div>
                <div class="clear">
                </div>
                <div id="slist-tlist" class="scont hideElement">
                </div>
                <div class="clear">
                </div>
                <div class="clear">
                </div>
            </div>
            <div class="clear">
            </div>
        </div>
    </div>
</div>
<div id="plswait" class="hideElement">
    <p>@Html.ImageBuilder(Url, "3.gif", new { style = "position: relative; top: 5px;" })
        Please wait while we process your request...</p>
</div>
@section Stylesheet {
    @Html.CssBuilder(Url, "subscription-1.3.css")
    @Html.CssBuilder(Url, "transaction-1.4.css")
    <!--[if IE 7]>
    @Html.CssBuilder(Url, "transaction.ie7-1.0.css")
<![endif]-->
}
@section JScriptBottom {
    @Html.JsBuilder(Url, "helpers.js")
    @Html.JsBuilder(Url, "underscore-min.js")
    <script type="text/javascript">
    var yStatus = @isLoggedIn;
    var uriExt = '@ReturnUrlStr';
    var csId = @csId;
    var dSelectedIndex = $($('#b-options li[class*="selected"]').attr('data-group') + ' select[name=product-selections] option:selected').val();
    </script>
    <script type="text/javascript">
        var currentSelectedId = 0;

        function GetShows(sIndex, type) {
            $.ajax({
                url: '/Subscribe/GetShows',
                data: { id: sIndex, type: type, currentCategoryId: csId },
                dataType: 'json',
                beforeSend: function () {
                    $('.scont').html($('#plswait').html());
                }
            }).done(function (data) {
                $('#slist-list').empty();
                //fill grid
                $.each(data, function (x, y) {
                    var html = '<div class="sitem-container"><a href="/Show/Details/' + y.CategoryId + '"><img src="' + y.ImgUrl + '" title="' + y.Name + '" alt="" /></a><div class="sitem-name"><a href="/Show/Details/' + y.CategoryId + '">' + y.Name + '</a></div></div>'
                    $('#slist-list').append(html);
                });

                //fill text
                var groupData = _.groupBy(data, function (obj) {
                    return obj.ParentCategoryName;
                });

                var optGroups = [];
                var html = '';

                for (var key in groupData) {
                    if (groupData.hasOwnProperty(key)) {
                        html += '<div class="tlist-container">';
                        html += '<div class="t-title">' + key + '</div>';
                        var currentGroup = groupData[key];
                        html += '<ul class="t-ul">';
                        for (var i = 0; i < currentGroup.length; i++) {
                            html += '<li><a href="/Show/Details/' + currentGroup[i].CategoryId + '">' + currentGroup[i].Name + '</a></li>';

                            //$("<option />").attr("value", currentGroup[i].CategoryId).html().appendTo(optGroup);
                        }
                        html += '</ul>';
                        html += '<div class="breakStandard"></div>';
                        html += '</div>';
                    }
                }
                var $container = $('#slist-tlist');
                $('#slist-tlist').empty();
                $(html).appendTo('#slist-tlist');
            });
        }

        function fillDropdown(list, type, init) {
            var dd = $('#FilterBy');
            if (init) {
                dd.find('option').remove().end();
                $.getJSON('/Subscribe/GetCategories', { list: list, type: type }, function (data) {
                    $.each(data, function (x, y) {
                        if (x == 0 && init) {
                            currentSelectedId = y.Value;
                            if (y.Text == '--')
                                $('.list-s').hide();
                            else
                                $('.list-s').show();
                            setTimeout(GetShows(y.Value, y.Text == '--' ? 2 : 0), 500);
                        }
                        dd.append($('<option>').val(y.Value).text(y.Text));
                    });
                });
                $('.scont-selection').removeClass('link-selected').first().addClass('link-selected');
            }
        }

        function initView() {
            $('#pr-options .pr-options-body').html($('.fview').html());
            var lStart = $('#b-options li[class^=selected]');
            var type = lStart.attr('data-type');
            if (type == 0)
                fillDropdown(lStart.attr('data-package'), type, true);
            else
                fillDropdown(lStart.attr('data-show'), type, true);
        }
        $(document).ready(function () {
            //initialize
            initView();
            $('#b-options li').on('click', function () {
                var tmp = $(this).hasClass('selected');
                $('#b-options li').removeClass('selected'); $(this).addClass('selected');
                var elementId = $(this).attr('data-group');
                dSelectedIndex = $(elementId + ' select[name=product-selections] option:selected').val();
                $('#pr-options .pr-options-body').html($(elementId).html());
                var type = $(this).attr('data-type');
                if (type == 0)
                    fillDropdown($(this).attr('data-package'), type, !tmp);
                else
                    fillDropdown($(this).attr('data-show'), type, !tmp);
                return false;
            });
            //radio button
            $('#subscribeBtn').on('click', function () {
                if (yStatus) {
                    var url = '/Payment/Select/' + dSelectedIndex + uriExt;
                    $('#subscribeBtn').attr('href', url);
                }
                else {
                    $('#signin').click();
                    $('html, body').animate({
                        scrollTop: $('#entertainmentBtn').offset().top
                    }, 800);
                    return false;
                }
            });
            //selection on dropdown            
            $('#FilterBy').selected(function (data) {
                var sIndex = data.options[data.selectedIndex];
                if (currentSelectedId != sIndex.value) {
                    $('#slist-list').empty();
                    var sIx = 1;
                    if (sIndex.text == 'ALL')
                        sIx = 0;
                    else if (sIndex.text == '--')
                        sIx = 2;
                    GetShows(sIndex.value, sIx);
                    currentSelectedId = sIndex.value;
                }
            });
            $('.scont-selection').click(function () {
                $('.scont-selection').removeClass('link-selected');
                $('.scont').hide();
                var elementId = '#' + $(this).attr('data-link');
                $(this).addClass('link-selected');
                $(elementId).show();
                return false;
            });
            
            $(document).on('change', 'select[name=product-selections]', function () { dSelectedIndex = $(this).val(); });
        });         
    </script>
}
