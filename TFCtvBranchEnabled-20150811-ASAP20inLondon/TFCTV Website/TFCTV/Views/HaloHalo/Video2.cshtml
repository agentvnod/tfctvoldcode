@model IPTV2_Model.EpisodeCategory
@{
    string pageTitle = String.Format("{0} Episode", Model.Episode.EpisodeName);
    IPTV2_Model.Show show = Model.Show;

    /* ShareBar Metadata */
    string title = String.Format("{0}", Model.Episode.EpisodeName);
    string href = new Uri(Request.Url.AbsoluteUri).GetLeftPart(UriPartial.Path);
    string img = String.Format("{0}{1}/{2}", GlobalConfig.EpisodeImgPath, Model.EpisodeId, Model.Episode.ImageAssets.ImageVideo);
    string description = Model.Episode.Synopsis.Replace("\r\n", String.Empty).Replace("\t", String.Empty).Ellipsis(160);

    /* ShareBar Obj */
    var ShareObj = new GigyaShareObj()
    {
        title = title,
        href = href,
        img = img,
        description = description,
        containerId = "shareDiv",
        elementType = "episode",
        id = Model.EpisodeId
    };

    /* Meta description */
    string metaDescription = String.Format("{0}, {1}", title, Model.Episode.Synopsis);

    /* Open Graph */
    string open_graph_img = img; //will add sns later
    string og_type = "video.episode";

    /* Ratings&Reviews Metadata */
    string streamID = String.Format("Episode_{0}", Model.EpisodeId);
    string categoryID = "Episodes";
    if (show is IPTV2_Model.Movie || show is IPTV2_Model.SpecialShow || show is IPTV2_Model.LiveEvent)
    {
        title = String.Format("{0} - {1}", show.Description, Model.Episode.EpisodeName);
        pageTitle = title;
        /* Change the type to Show & id to CategoryId if found to be a Movie/Special/LiveEvent */
        ShareObj.elementType = "show";
        ShareObj.id = show.CategoryId;

        /* Change the meta description if it is a movie */
        metaDescription = String.Format("{0}, {1}", show.Description, show.Blurb);

        /* Change Open Graph data */
        og_type = "video.movie";
    }

    /* Robot Crawlability */
    var noCommentText = String.Format("There are no comments available for {0}", title);
    bool IsAjaxCrawlable = Request.IsAjaxCrawlingCapable();

    /* CommentsUI Obj */
    var CommentsUIObj = new GigyaWidgetUIObj()
    {
        streamID = streamID,
        categoryID = categoryID,
        containerId = "commentsDiv",
        ShareObj = ShareObj,
        IsAjaxCrawlable = IsAjaxCrawlable
    };

    /* Reactions Obj */
    var ReactionsUIObj = new GigyaWidgetUIObj()
    {
        streamID = streamID,
        categoryID = categoryID,
        containerId = "reactionsDiv",
        ShareObj = ShareObj

    };

    ViewBag.Title = String.Format("{0} - TFC.tv", pageTitle);
    Layout = "~/Views/Shared/_UXUpdate.cshtml";
    var synopsis = MyUtility.FormatUrls(Model.Episode.Synopsis);

    CheckSubscriptionReturnObject HasActiveSubscriptionBasedOnCategoryId = ViewBag.HasActiveSubscriptionBasedOnCategoryId;
    string ScreenText = "Click play to watch the full video";
    if (!(HasActiveSubscriptionBasedOnCategoryId.HasSubscription))
    {
        if (Request.Browser.IsMobileDevice)
        {
            ScreenText = "Preview of this video is not available on your device";
        }
        else
        {
            ScreenText = "Click play to watch preview of this video";
        }
    }

    //instantiate flowplayerobj
    var flowplayerObj = new FlowPlayerObj() { IsLiveStream = false, IsMobileDeviceHtml5Capable = false };
    var playbackUri = String.Format("/Ajax/GetMedia/{0}", Model.EpisodeId);
    Html5CapableObj html5capableObj = MyUtility.IsDeviceHtml5Capable(Request, Model.EpisodeId);
    playbackUri = html5capableObj.playbackUri;
    flowplayerObj.IsMobileDeviceHtml5Capable = html5capableObj.IsMobileDeviceHtml5Capable;

    //get dax
    string daxDate = String.Empty;
    try
    {
        if (Model.Episode.DateAired != null)
        {
            daxDate = String.Format(":{0}", ((DateTime)Model.Episode.DateAired).ToString("yyyyMMdd"));
        }
    }
    catch (Exception) { }
    var daxDetail = String.Format("tfc-tv:entertainment:free-videos:{0}{1}", MyUtility.GetSlug(Model.Episode.EpisodeName), daxDate);
    ViewBag.DaxName = daxDetail;

    var streamSenseObj = ContextHelper.CreateStreamSenseObject(Model.Episode, show);
}
<!-- halo halo click page body  -->
<section class="page_pagebody page_videopage halohalo">
    <div class="container">
        <div class="row channel_header">
            <!-- page header -->
            @Html.ImageBuilder(Url, "ux/hhc.jpg", new { title = Model.Show.Description, alt = Model.Show.Description, @class = "img100" })
        </div>
        <!-- END page header -->
        <div class="row">
            <!-- page left side -->
            <div class="video_left col-sm-7 col-xs-12">
                <!-- video player section -->
                <div class="video_player_outer">
                    <div class="video_player">
                        <!-- video player -->
                        <div class="video_part">
                            <div class="black-screen-668x406" id="floating_videodiv">
                                <div class="bs-play">
                                    @{if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription || !Request.Browser.IsMobileDevice)
                                    {
                                        @Html.ImageBuilder(Url, "entrypoint/playbtn-silver.png", new { id = "pbtn-silver" })
                                    }
                                    else
                                    {
                                        <div class="breakLarge">
                                        </div>
                                        <div class="breakLarge">
                                        </div>
                                    }
                                    }
                                    <div class="bs-watch">
                                        @Html.Raw(ScreenText)
                                    </div>
                                </div>
                            </div>
                            <div id="playerContainer" class="regular_video">
                            </div>
                            @{if (!User.Identity.IsAuthenticated)
                            {
                                if (!HasActiveSubscriptionBasedOnCategoryId.HasSubscription)
                                {
                                    <div class="bs-sbar">
                                        <span>
                                            @Html.ActionLink("SUBSCRIBE", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = href }, new { @class = "bs-subscribe bs-atag bs-box bs-box-subscribe" })
                                            to watch full video or <a href="#" class="bs-atag bs-close">close</a> this bar to
                                            subscribe later.
                                        </span>
                                    </div>
                                }
                            }
                            else
                            {
                                if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription && HasActiveSubscriptionBasedOnCategoryId.Within5DaysOrLess)
                                {
                                    <div class="bs-sbar">
                                        <span>
                                            Your subscription will expire in @HasActiveSubscriptionBasedOnCategoryId.NumberOfDaysLeft
                                            @(HasActiveSubscriptionBasedOnCategoryId.NumberOfDaysLeft > 1 ? "days" : "day").
                                            @Html.ActionLink("RENEW", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = href }, new { @class = "bs-atag bs-box bs-box-renew" })
                                            to extend your subscription or <a href="#" class="bs-atag bs-close">close</a> this
                                            bar to renew later.
                                        </span>
                                    </div>
                                }
                                else if (!HasActiveSubscriptionBasedOnCategoryId.HasSubscription)
                                {
                                    <div class="bs-sbar">
                                        <span>
                                            @Html.ActionLink("SUBSCRIBE", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = href }, new { @class = "bs-atag bs-box bs-box-subscribe" })
                                            to watch full video or <a href="#" class="bs-atag bs-close">close</a> this bar to
                                            subscribe later.
                                        </span>
                                    </div>
                                }
                            }
                            }
                        </div>
                    </div>
                    @Html.Partial("PlayerSwitcher")
                    <!-- end video player -->
                    <div class="video_des " itemscope itemtype="http://schema.org/Episode">
                        <!-- description for video -->
                        <h1 class="halohalo_h1" itemprop="name">
                            @Model.Episode.EpisodeName
                        </h1>
                        <p>
                            Posted on @Model.Episode.DateAired.Value.ToString("MMMM d, yyyy")
                        </p>
                        <br>
                        <p itemprop="description">
                            @Html.Raw(synopsis)
                        </p>
                    </div>
                    <!-- end description -->
                    <div class="video_share clearfix">
                        <!-- Social media share part -->
                        <div id="@ShareObj.containerId" class="col-xs-6 clearfix show_share">
                        </div>
                        <p>
                            If you are having problems viewing this video, please visit our <a href="@Url.Action("Index", "Help")">
                                Help Center.
                            </a> Is your video buffering? <a href="#">Check your bandwidth.</a>
                        </p>
                    </div>
                    <div class="clearfix">
                        <div id="@ReactionsUIObj.containerId">
                        </div>
                    </div>
                    <!-- end social -->
                </div>
                <!-- end video player section -->
                <div class="row vp_bottom_video">
                    <!-- page's bottom videos -->
                    <div class="col-xs-12 vp_head halohalo_div">
                        <!-- head part -->
                        <ul>
                            <li class="active">
                                <h2>
                                    <a href="#hhc_recently" data-toggle="tab">RECENTLY ADDED</a>
                                </h2>
                            </li>
                            <li>
                                <h2>
                                    <a href="#hhc_viewed" data-toggle="tab">MOST VIEWED</a>
                                </h2>
                            </li>
                            <li>
                                <h2>
                                    <a href="#hhc_shared" data-toggle="tab">MOST SHARED</a>
                                </h2>
                            </li>
                        </ul>
                    </div>
                    <!-- END head part -->
                    <div class="col-xs-12 vp_body tab-content">
                        @Html.Action("GetFeatures", "HaloHalo", new { id = 66, containerId = "hhc_recently", IsActive = true })
                        @Html.Action("GetFeatures", "HaloHalo", new { id = 63, containerId = "hhc_viewed" })
                        @Html.Action("GetFeatures", "HaloHalo", new { id = 65, containerId = "hhc_shared" })
                    </div>
                    <!-- END body part -->
                </div>
                <!-- end page bottom videos -->
            </div>
            <!-- end page left -->
            <!-- page right side -->
            <div class="video_right halo_right col-sm-5 col-xs-12">
                @*<div class="row">
                        <div class="col-xs-12 vp_head">
                            <!-- head part -->
                            <ul>
                                <li class="active"><a href="#">COMMENTS</a></li>
                                <li><a href="#">POST A COMMENT</a></li>
                            </ul>
                        </div>
                    </div>*@
                <br />
                <!-- END head part -->
                <div id="@CommentsUIObj.containerId" class="row feed_item clearfix">
                    @{if (IsAjaxCrawlable)
                    {
                        try
                        {
                            var responseData = GigyaMethods.GetComments(categoryID, streamID);
                            if (responseData != null)
                            {
                                if (responseData.errorCode == 0)
                                {
                                    if (responseData.commentCount > 0)
                                    {
                                        @Html.Raw(responseData.comments)
                                    }
                                    else
                                    {
                                        <span>@noCommentText</span>
                                    }
                                }
                            }
                        }
                        catch (Exception) { }
                    }
                    }
                </div>
                <!-- end feeds box -->
                <div class="row page_add">
                    <!-- page add -->
                    @Html.ImageBuilder(Url, "ux/add.jpg", new { alt = "advertisement" })
                </div>
            </div>
            <!-- end page right -->
        </div>
        <!-- end row -->
    </div>
    <!-- end container -->
</section>
<!-- end halo halo click section -->
@section JScriptBottom {
    @Html.Partial("_UXShareUI", ShareObj)
    @Html.Partial("_UXCommentsUI", CommentsUIObj)
    @Html.Partial("_UXReactionsUI", ReactionsUIObj)
    <!-- Flowplayer -->
    @{if (GlobalConfig.StreamSenseEnabled)
    {
        @Html.Partial("FlowPlayerStreamSensePartial", flowplayerObj)
    }
    else
    {
        @Html.Partial("FlowPlayerPartial", flowplayerObj)
    }}
    <script type="text/javascript">

        var userActionURL = '@href';
        var playerContainer = 'playerContainer';
        var eid = null;
        var sid = null;
        var playbackId = @Model.EpisodeId;
        var playbackType = 1; // Episode
        var flow = {}; var config = {};
        var categoryType = 'Episode';
        var time = true;
        var isClip = false;
    </script>
    @{if ((show is IPTV2_Model.Movie || show is IPTV2_Model.SpecialShow))
    {
        <script type="text/javascript">
            var gmessage = 'I just watched @HttpUtility.JavaScriptStringEncode(show.Description)';
            var gtitle = '@HttpUtility.JavaScriptStringEncode(title)';
            var gdescription = '@HttpUtility.JavaScriptStringEncode(show.Blurb)';
            var gimg = '@img';
            var ghref = '@href';
        </script>
    }
    else
    {
        <script type="text/javascript">
            var gmessage = 'I just watched an episode of @Ajax.JavaScriptStringEncode(show.Description)';
            var gtitle = '@Ajax.JavaScriptStringEncode(title)';
            var gdescription = '@Ajax.JavaScriptStringEncode(Model.Episode.Synopsis)';
            var gimg = '@img';
            var ghref = '@href';
        </script>
    }
    }
    <!-- media-player -->
    <script type="text/javascript">
        //CreatePlayer()
        function CreatePlayer(uri) {
            $.ajax({
                url: uri
                    , dataType: 'json'
                    , success: function (data) {
                        if (data.errorCode == 0) {
                            $.getScript(playerJS).done(function () {
                                var akObj = { url: Afp };
                                if (data.data.SubClip != null) {
                                    var subClip = { clipBegin: data.data.SubClip.Start, clipEnd: data.data.SubClip.End };
                                    akObj = { url: Afp, subClip: subClip };
                                    time = false;
                                    isClip = true;
                                    gmessage = 'I just watched a preview of @Ajax.JavaScriptStringEncode(show.Description)';
                                }
                                var config = { container: playerContainer, playerSWF: playerSWF, expressInstallSWF: expressInstallSWF, playButtonURL: playButtonURL, logoURL: logoURL, controllerSWF: controllerSWF, csmaPluginSWF: csmaPluginSWF, csmaConfig: csmaConfig, apObj: akObj, scaling: 'fit', url: data.data.Url, categoryType: categoryType, label: null, sid: sid, eid: eid, isClip: isClip, trackerSWF: trackerSWF, trackerID: trackerID, userActionURL: userActionURL, uri: uri, time: time, ipadUrl: data.data.Url, allowShare: true, playbackType: playbackType, playbackId: playbackId, analyticsSWF: analyticsSWF, subscribe: data.data.PromptToSubscribe, gmessage: gmessage, gtitle: gtitle, gdescription: gdescription, gimg: gimg, ghref: ghref, streamType: 0 };
                                flow.Player.Create(config);
                            });
                        }
                        else if (data.errorCode == -4000) {
                            gigya.socialize.logout({ callback: function (response) {
                                location.href = '@GlobalConfig.MultipleLoginRedirectedUrl';
                            }
                            });
                            location.href = '@GlobalConfig.MultipleLoginRedirectedUrl';
                        }
                        else if (data.errorCode == -704) {
                            $('#' + playerContainer).append($('#subscribePromptcontainer_1').html());
                            if ($f() == undefined) {
                                $('#subscribePrompt_1').css('margin-top', '0px');
                            }
                        }
                        else {
                            $('.player-menu-container').remove();
                            $('#' + playerContainer).html($('#not-available').html());
                        }
                    }
            });
        }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            var uri = '@playbackUri';
            CreatePlayer(uri);
        });
    </script>
    <script type="text/javascript">
        $('.bs-close').on('click', function () {
            $('.bs-sbar').fadeOut(800);
            $('.black-screen-668x406').fadeOut(800);
            return false;
        });
    </script>
    @{if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription || !Request.Browser.IsMobileDevice)
    {
        <text>
            <script type="text/javascript">
                $('#pbtn-silver').on('click', function () {
                    $('.black-screen-668x406').fadeOut(800);
                    if ($f() != undefined)
                        $f().play();
                    setTimeout(function () { $('.bs-sbar').fadeOut(800); }, 15000);
                });
                $('.player-mode').on('click', function () {
                    $('.black-screen-668x406').fadeOut(800);
                });
            </script>
        </text>
    }
    }
    @Html.Partial("PlayerSwitcherJS")
    @Html.Partial("StreamSensePartial", streamSenseObj)
}
@section MetaTags {
    <meta name="fragment" content="!">
    <meta name="description" content="@HttpUtility.HtmlEncode(metaDescription)" />
    <meta name="keywords" content="@Model.Episode.Metadata" />
    <link rel="canonical" href="@href" />
    <link rel="image_src" href="@img">
}
@section OpenGraph {
    <meta property="og:url" content="@href" />
    <meta property="og:site_name" content="TFC.tv" />
    <meta property="og:title" content="@title" />
    <meta property="og:description" content="@HttpUtility.HtmlEncode(metaDescription)" />
    <meta property="og:type" content="@og_type" />
    <meta property="og:image" content="@open_graph_img" />
}
