@model IPTV2_Model.Episode
@{
    Layout = "~/Views/Shared/_TFCTVBlue.cshtml";
    IPTV2_Model.Show show = ViewBag.Show;
    ViewBag.Title = String.Format("{0} - TFC.tv", Model.EpisodeName);
    string CountryCode = ViewBag.CountryCode;

    string trackingLabel = String.Format("{0}|{1}|{2}|{3}|{4}|{5}", Model.EpisodeId, show.Description, Model.DateAired.Value.ToString("MMMM d, yyyy"), ViewBag.CategoryType, ViewBag.EmailAddress, Request.GetUserHostAddressFromCloudflare());
    var EpNum = ViewBag.EpisodeNumber;

    ViewDataDictionary dictionary = new ViewDataDictionary();
    bool Loved = ViewBag.Loved;
    TFCTV.Helpers.UserData userData = TFCTV.Helpers.MyUtility.GetUserPrivacySetting(null);
    dictionary.Add(new KeyValuePair<string, object>("hasLoved", Loved));

    string TFCTvDownloadPlayerFullUrl = String.Empty;

    CheckSubscriptionReturnObject HasActiveSubscriptionBasedOnCategoryId = ViewBag.HasActiveSubscriptionBasedOnCategoryId;

    if (MyUtility.isUserLoggedIn())
    {

        var userId = new Guid(User.Identity.Name);
        userData = TFCTV.Helpers.MyUtility.GetUserPrivacySetting(userId);
        dictionary.Add(new KeyValuePair<string, object>("userData", userData));

        if (GlobalConfig.IsDownloadPlayerEnabled)
        {
            string TFCTvPlayerEncryptedToken = MyUtility.Encrypt(String.Format("{0}&{1}", Model.EpisodeId, User.Identity.Name), GlobalConfig.TFCTVPlayerDownloadSalt);
            TFCTvDownloadPlayerFullUrl = String.Format("{0}{1}", GlobalConfig.TFCTvDownloadPlayerUrl, HttpUtility.UrlEncode(TFCTvPlayerEncryptedToken));
        }
    }

    //Build PlayerContorlBarModel
    var playerControlBarModel = new TFCTV.Models.PlayerControlBarModel() { EpisodeId = Model.EpisodeId, IsUserEntitled = HasActiveSubscriptionBasedOnCategoryId.HasSubscription, TFCTvDownloadPlayerFullUrl = TFCTvDownloadPlayerFullUrl };

    //ShareMedia
    string title = String.Empty;
    var image = Html.ContentBuilder(Url, "/content/images/blank-image.jpg").ToString();
    try
    {
        if (show is IPTV2_Model.Movie || show is IPTV2_Model.SpecialShow)
        {
            title = show.Description;
            image = String.Format("{0}{1}/{2}", GlobalConfig.ShowImgPath, show.CategoryId, show.ImagePoster);
        }
        else
        {
            title = String.Format("{0}, {1}", show.Description, Model.DateAired.Value.ToString("MMMM d, yyyy"));
            image = String.Format("{0}{1}/{2}", GlobalConfig.EpisodeImgPath, Model.EpisodeId, Model.ImageAssets.ImageVideo);
        }
    }
    catch (Exception) { }

    var altcastcode = GlobalConfig.BCWMHCoverItLiveAltCastCode; //CoverItLive!
    string img = GlobalConfig.AssetsBaseUrl + GlobalConfig.BlankGif;
    try
    {
        img = String.IsNullOrEmpty(Model.ImageAssets.ImageHeader) ? GlobalConfig.AssetsBaseUrl + GlobalConfig.BlankGif : String.Format("{0}{1}/{2}", GlobalConfig.EpisodeImgPath, Model.EpisodeId.ToString(), Model.ImageAssets.ImageHeader);
    }
    catch (Exception) { }

    string showParentCategories = ContextHelper.GetShowParentCategories(show.CategoryId);
    string parentCategories = ContextHelper.GetEpisodeParentCategories(Model.EpisodeId);

    var ReturnUrl = ViewContext.HttpContext.Request.Url.PathAndQuery;


    //TEXT
    string BarText = String.Empty;
    string ScreenText = String.Empty;

    if (!(HasActiveSubscriptionBasedOnCategoryId.HasSubscription))
    {
        if (Request.Browser.IsMobileDevice)
        {
            ScreenText = "Preview of this video is not available on your device";
        }
        else
        {
            ScreenText = "Click play to watch preview of this video";
        }
    }
    else
    {
        ScreenText = "Click play to watch the full video";
    }
    int attribActionId;
    if (!HasActiveSubscriptionBasedOnCategoryId.HasSubscription)
    { attribActionId = (int)AnniversaryPromo.AnnivPromo_ViewingFREE; }
    else
    { attribActionId = (int)AnniversaryPromo.AnnivPromo_ViewingPAID; }
    string attribDescription = String.Format("You watched <a href=\"{0}\">{1}</a>", Request.Url.AbsoluteUri, String.Compare(Model.EpisodeCode, Model.EpisodeName, true) == 0 ? String.Format("{0} - {1}", show.Description, Model.DateAired.Value.ToString("MMMM d, yyyy")) : Model.EpisodeName);

    //string parentCategory = ContextHelper.GetShowParentCategories(show.CategoryId, useDescription: true, getSingleParent: true);
}
<br />
<br />
<div id="mainBody">
    <form id="form1" name="form1" method="post" action="#">
    <div class="transparentBg">
        <!-- click tayo header -->
        <div style="margin-bottom: -3px;">
            <img src="@img" width="940" height="141" title="@Model.EpisodeName" alt="@Model.EpisodeName" /></div>
        <!-- Video and Menu -->
        <div id="videoPlayerMenu" style="min-height: 650px;">
            <div id="videoPlayer">
                <div id="videoEmbed">
                    @{if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription && Request.Browser.IsMobileDevice)
                      {
                          if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription && HasActiveSubscriptionBasedOnCategoryId.Within5DaysOrLess)
                          {                   
                        <div class="bs-sbar switch-to-540 bs-sbar-mobile">
                            <span>Your subscription will expire in @HasActiveSubscriptionBasedOnCategoryId.NumberOfDaysLeft
                                @(HasActiveSubscriptionBasedOnCategoryId.NumberOfDaysLeft > 1 ? "days" : "day").
                                @Html.ActionLink("RENEW", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = ReturnUrl }, new { @class = "bs-atag bs-box bs-box-renew" })
                                now to extend or <a href="#" class="bs-atag bs-close">close</a> this bar to renew
                                later.</span></div>  
                          }
                      }
                      else
                      {                        
                        <div class="black-screen-940x406 switch-to-540">
                            <div class="bs-play">
                                @{if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription || !Request.Browser.IsMobileDevice)
                                  {
                                    @Html.ImageBuilder(Url, "entrypoint/playbtn-silver.png", new { id = "pbtn-silver" })
                                  }
                                  else
                                  {
                                    <div class="breakLarge">
                                    </div>
                                    <div class="breakLarge">
                                    </div>
                                  }
                                }
                                <div class="bs-watch">
                                    @Html.Raw(ScreenText)
                                </div>
                            </div>
                        </div>
                        
                      }
                    }
                    <div id="playerContainer" style="width: 540px; height: 406px;">
                    </div>
                    @{if (!User.Identity.IsAuthenticated)
                      {
                        <div class="bs-sbar switch-to-540">
                            <span>@Html.ActionLink("SUBSCRIBE", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = ReturnUrl }, new { @class = "bs-subscribe bs-atag bs-box bs-box-subscribe" })
                                to watch full video or <a href="#" class="bs-atag bs-close">close</a> this bar to
                                subscribe later.</span></div>  
                      }
                      else
                      {
                          if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription && HasActiveSubscriptionBasedOnCategoryId.Within5DaysOrLess)
                          {                   
                        <div class="bs-sbar switch-to-540">
                            <span>Your subscription will expire in @HasActiveSubscriptionBasedOnCategoryId.NumberOfDaysLeft
                                @(HasActiveSubscriptionBasedOnCategoryId.NumberOfDaysLeft > 1 ? "days" : "day").
                                @Html.ActionLink("RENEW", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = ReturnUrl }, new { @class = "bs-atag bs-box bs-box-renew" })
                                now to extend or <a href="#" class="bs-atag bs-close">close</a> this bar to renew
                                later.</span></div>  
                          }
                          else if (!HasActiveSubscriptionBasedOnCategoryId.HasSubscription)
                          { 
                        <div class="bs-sbar switch-to-540">
                            <span>@Html.ActionLink("SUBSCRIBE", "Details", "Subscribe", new { id = show.CategoryId, ReturnUrl = ReturnUrl }, new { @class = "bs-atag bs-box bs-box-subscribe" })
                                to watch full video or <a href="#" class="bs-atag bs-close">close</a> this bar to
                                subscribe later.</span></div>  
                          }
                      }
                    }
                </div>
                @Html.Partial("_PlayerControlBar", playerControlBarModel)
                <div class="clear">
                </div>
                <div id="videoDetails" style="padding-left: 20px;">
                    <div id="videoCurrentInfo">
                        <div class="videoTitle">@Model.EpisodeName
                        </div>
                        <div class="breakSmall clear">
                        </div>
                        <div>@Html.Partial("_SharePartial", Model) @Html.Partial("_LovePartial", Model, dictionary)</div>
                        <div>
                            <div class="breakStandard clear">
                            </div>
                            <div id="left-block" class="floatLeft" style="margin-right: 10px;">
                                <div id="ep-thumb">
                                    @{if (!String.IsNullOrEmpty(Model.ImageAssets.ImageVideo))
                                      {
                                        <img width="151" alt="" border="0" src="@String.Format("{0}{1}/{2}", GlobalConfig.EpisodeImgPath, @Model.EpisodeId, @Model.ImageAssets.ImageVideo)" />
                                      }
                                      else
                                      {
                                        @Html.ImageBuilder(Url, "blank-image.jpg", new { width = 151, height = 77 })                            
                                      }
                                    }
                                </div>
                            </div>
                            <div id="right-block">
                                <div class="videoDescription">
                                    <div class="more-less">
                                        <div class="more-block" style="margin-right: 10px;">@Html.Raw(Model.Synopsis)</div>
                                    </div>
                                </div>
                                <div class="breakStandard">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="videoMenu">
                <div class="breakSmall clear">
                </div>
                <div id="videoCurrent" style="margin-top: 25px;">
                    <!-- Chat -->
                    <iframe src="http://www.coveritlive.com/index2.php/option=com_altcaster/task=viewaltcast/altcast_code=@altcastcode/height=550/width=350"
                        scrolling="no" height="550px" width="350px" frameborder="0" allowTransparency="true">
                        <a href="http://www.coveritlive.com/mobile.php/option=com_mobile/task=viewaltcast/altcast_code=@altcastcode">
                            @Model.EpisodeName</a></iframe>
                </div>
            </div>
            <div class="clear">
            </div>
        </div>
        <div class="breakStandard">
        </div>
        <div class="leaderBoard" style="text-align: center;">
            <script type='text/javascript'>
                GA_googleFillSlot("TFCtv_KapamilyaChat_Leaderboard_728x90");
            </script>
        </div>
        <div class="clear">
        </div>
        <div class="breakSmall">
        </div>
        <div class="clear">
        </div>
        <div class="breakLarge">
        </div>
        <div id="user-comments">
            <div class="itemListBody">
                <div class="wrapper">
                    <div id="ratings-and-review">
                        @Html.Partial("_EpisodesRatingsAndReviews", Model)
                    </div>
                </div>
            </div>
        </div>
        <div class="clear">
        </div>
        <div class="breakLarge">
        </div>
    </div>
    </form>
</div>
@{using (Html.BeginForm(String.Empty, String.Empty, FormMethod.Post, new { id = "naformW", style = "display: none;" }))
  {                  
    <div class="hideElement">@Html.AntiForgeryToken()</div>
    @Html.TextBox("naId", attribActionId, new { id = "naId", type = "hidden" })
    @Html.TextBox("naDescription", HttpUtility.HtmlEncode(attribDescription), new { id = "naDescription", type = "hidden" })
  }
}
@section StyleSheet {
    @Html.CssBuilder(Url, "comment.css")
    @Html.CssBuilder(Url, "clicktayo.2-1.css")
    @Html.CssBuilder(Url, "ratingsreviews-1.1.css")
    @Html.CssBuilder(Url, "entrypoint-1.4.css")
    @Html.CssBuilder(Url, "player-menu.small.css")
    <meta property="og:url" content="@HttpContext.Current.Request.Url.AbsoluteUri"/>
    <meta property="og:site_name" content="TFC.tv" />
    @{if ((show is IPTV2_Model.Movie || show is IPTV2_Model.SpecialShow))
      { 
        <meta property="og:title" content="@HttpUtility.JavaScriptStringEncode(show.Description)"/>
        <meta property="og:description" content="@HttpUtility.JavaScriptStringEncode(show.Blurb)"/>
        <meta property="og:type" content="@ViewBag.CategoryType" />
        <meta property="og:image" content="@String.Format("{0}{1}/{2}", GlobalConfig.ShowImgPath, show.CategoryId, show.ImagePoster)"/>
        <meta name="description" content="@HttpUtility.JavaScriptStringEncode(show.Blurb)" />
      }
      else
      {
        <meta property="og:title" content="@HttpUtility.JavaScriptStringEncode(show.Description) - @Model.DateAired.Value.ToString("MMMM d, yyyy")"/>
        <meta property="og:description" content="@HttpUtility.JavaScriptStringEncode(show.Description) - @Model.DateAired.Value.ToString("MMMM d, yyyy")"/>
        <meta property="og:type" content="Episode" />
        <meta property="og:image" content="@GlobalConfig.EpisodeImgPath@Model.EpisodeId/@Model.ImageAssets.ImageVideo"/>
        <meta name="description" content="@HttpUtility.JavaScriptStringEncode(Model.Synopsis)" />
      }
    }
}
@section JScript{
    <script type='text/javascript' src='http://partner.googleadservices.com/gampad/google_service.js'>
    </script>
    <script type='text/javascript'>
        GS_googleAddAdSenseService("ca-pub-1805244726360577");
        GS_googleEnableAllServices();
    </script>
    <script type="text/javascript">
        GA_googleAddAttr("Episode", "@Model.EpisodeId");
        GA_googleAddAttr("Show", "@parentCategories");
        GA_googleAddAttr("Category", "@showParentCategories");
    </script>
    <script type='text/javascript'>
        GA_googleAddSlot("ca-pub-1805244726360577", "TFCtv_KapamilyaChat_Leaderboard_728x90");
    </script>
    <script type='text/javascript'>
        GA_googleFetchAds();
    </script>
}
@section JScriptBottom{
    @Html.Partial("FlowPlayerPartial", true)
    @Html.JsBuilder(Url, "jquery.cycle.all.js")
    @Html.JsBuilder(Url, "jquery.timeago.js")
    @Html.JsBuilder(Url, "commentsGenerator.js")
    @Html.JsBuilder(Url, "featureItemsGenerator-1.2.js")
    @Html.JsBuilder(Url, "jquery.validate.min.js")
    <script type="text/javascript">
        var socializePluginUrl = '@Html.ContentBuilder(Url, "scripts/socialize.1.js")';        
    </script>
    <script type="text/javascript">
        var userActionURL = '@HttpContext.Current.Request.Url.AbsoluteUri';
        var playerContainer = 'playerContainer';        
        var label = '@trackingLabel';
        var eid = null;
        var sid = null;
        var playbackId = @Model.EpisodeId;
        var playbackType = 1; // Episode
        var flow = {}; var config = {};
        var categoryType = '@ViewBag.CategoryType';
        var time = true;
        var isClip = false;            
    </script>
    <!-- ShareMedia -->
    @{if ((show is IPTV2_Model.Movie || show is IPTV2_Model.SpecialShow))
      { 
        <script type="text/javascript">
            var gmessage = 'I just watched @HttpUtility.JavaScriptStringEncode(show.Description)';
            var gtitle = '@HttpUtility.JavaScriptStringEncode(title)';
            var gdescription = '@HttpUtility.JavaScriptStringEncode(show.Blurb)';
            var gimg = '@image';
            var ghref = '@HttpContext.Current.Request.Url.AbsoluteUri';
        </script>
      }
      else
      {      
        <script type="text/javascript">
            var gmessage = 'I just watched an episode of @Ajax.JavaScriptStringEncode(show.Description)';
            var gtitle = '@Ajax.JavaScriptStringEncode(title)';
            var gdescription = '@Ajax.JavaScriptStringEncode(Model.Synopsis)';
            var gimg = '@image';
            var ghref = '@HttpContext.Current.Request.Url.AbsoluteUri';
        </script>
      }}
    @*<!-- sola analytics -->
    <script type="text/javascript">
        var solaObj = {
            category: '@MyUtility.RemoveNonAlphaNumericCharacters(parentCategory)',
            subCategory: null,
            show: '@MyUtility.RemoveNonAlphaNumericCharacters(show.Description)',
            episode: '@MyUtility.RemoveNonAlphaNumericCharacters(title)',
            pageUrl: document.URL,
            pageReferrer: document.referrer,
            browser: navigator.userAgent
        }
    </script>*@
    <!-- media-player -->
    <script type="text/javascript">
        //CreatePlayer()
        function CreatePlayer(uri) {
            $.ajax({
                url: uri
                    , dataType: 'json'
                    , success: function (data) {
                        if (data.errorCode == 0) {
                            $.getScript(playerJS).done(function () {
                                var akObj = { url: Afp };
                                if (data.data.SubClip != null) {
                                    var subClip = { clipBegin: data.data.SubClip.Start, clipEnd: data.data.SubClip.End };
                                    akObj = { url: Afp, subClip: subClip };
                                    time = false;
                                    isClip = true;
                                    gmessage = 'I just watched a preview of @Ajax.JavaScriptStringEncode(show.Description)';
                                }
                                var config = { container: playerContainer, playerSWF: playerSWF, expressInstallSWF: expressInstallSWF, playButtonURL: playButtonURL, logoURL: logoURL, controllerSWF: controllerSWF, csmaPluginSWF: csmaPluginSWF, csmaConfig: csmaConfig, apObj: akObj, scaling: 'fit', url: data.data.Url, categoryType: categoryType, label: label, sid: sid, eid: eid, isClip: isClip, trackerSWF: trackerSWF, trackerID: trackerID, userActionURL: userActionURL, uri: uri, time: time, ipadUrl: data.data.Url, allowShare: true, playbackType: playbackType, playbackId: playbackId, analyticsSWF: analyticsSWF, subscribe: data.data.PromptToSubscribe, gmessage: gmessage, gtitle: gtitle, gdescription: gdescription, gimg: gimg, ghref: ghref, streamType: isSelectedMode };
                                flow.Player.Create(config);
                            });
                        }
                        else if (data.errorCode == -4000) {
                            gigya.socialize.logout({ callback: function (response) {
                                location.href = '@GlobalConfig.MultipleLoginRedirectedUrl';
                            }
                            });
                            location.href = '@GlobalConfig.MultipleLoginRedirectedUrl';
                        }
                        else if (data.errorCode == -701) {
                            $('.bs-watch').html('Video is currently unavailable');
                            $('.bs-sbar').hide();
                            $('#pbtn-silver').unbind('click');
                        }
                        else {
                            $('.bs-watch').html(data.errorMessage);
                            $('.bs-sbar').hide();
                            $('#pbtn-silver').unbind('click');
                        }
                    }
            });
        }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            var uri = '/Ajax/GetMedia/@Model.EpisodeId';
            CreatePlayer(uri);
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#chat-bar').remove();
        });
    </script>
    <script type="text/javascript">
        $('.bs-close').on('click', function () {
            $('.bs-sbar').fadeOut(800);
            $('.black-screen-940x406').fadeOut(800);
            return false;
        });
    </script>
    @{if (HasActiveSubscriptionBasedOnCategoryId.HasSubscription || !Request.Browser.IsMobileDevice)
      {
        <text>
        <script type="text/javascript">
            $('#pbtn-silver').on('click', function () {
                $('.black-screen-940x406').fadeOut(800);
                if ($f() != undefined)
                    $f().play();
                setTimeout(function () { $('.bs-sbar').fadeOut(800); }, 15000);
            });

            $('.player-mode').on('click', function () {
                $('.black-screen-940x406').fadeOut(800);
            });
        </script>
        </text>
      }
    }
    @{if (!HasActiveSubscriptionBasedOnCategoryId.HasSubscription)
      { 
        <script type="text/javascript">
            $(document).ready(function () {
                setTimeout(function () {
                    $f().onFinish(function () {
                        $('.bs-sbar').show();
                        $('.black-screen-940x406').show();
                    });
                }, 15000);
            });            
        </script>
      }
    }
    <script type="text/javascript">
        $(document).ready(function () {
            setTimeout(function () {
                $f().onCuepoint([300000], function (clip, cuepoint) {
                    var nform = $('form#naformW');
                    $.post("/Ajax/NotifyAction", nform.find('input').serialize(), function (data) {
                        //do something
                    });
                });
            }, 15000);
        });
    </script>
    @{if (!User.Identity.IsAuthenticated)
      { 
        <script type="text/javascript">
            $('.bs-signin').on('click', function () { $('#signin').click(); return false; });
        </script>      
      }
    }
    @{if (Request.Browser.IsMobileDevice && HasActiveSubscriptionBasedOnCategoryId.Within5DaysOrLess)
      {
        <script type="text/javascript">
            $(document).ready(function () {
                setTimeout(function () { $('.bs-sbar').fadeOut(800); }, 15000);
            });            
        </script>      
      }
    }
}
